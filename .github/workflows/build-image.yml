---
name: build-ublue-custom
on:
  workflow_call:
    inputs:
      image_name:
        type: string
        required: true

env:
  IMAGE_NAME: '${{ github.event.repository.name }}-${{ inputs.image_name }}' # the name of the image produced by this build, matches repo names
  IMAGE_REGISTRY: 'ghcr.io/${{ github.repository_owner }}' # do not edit

concurrency:
  group: ${{ inputs.image_name }}
  cancel-in-progress: true

jobs:
  build_push:
    name: Build and push image
    runs-on: ubuntu-24.04

    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download containerfiles
        uses: actions/download-artifact@v4
        with:
          name: containerfiles
          path: containerfiles

      - name: Maximize build space
        uses: ublue-os/remove-unwanted-software@v8

      - name: Generate tags
        id: generate-tags
        shell: bash
        run: |
          # Generate a timestamp for creating an image version history
          TIMESTAMP="$(date +%Y%m%d)"
          COMMIT_TAGS=()
          BUILD_TAGS=()

          # Have tags for tracking builds during pull request
          SHA_SHORT="${GITHUB_SHA::7}"
          COMMIT_TAGS+=("pr-${{ github.event.number }}")
          COMMIT_TAGS+=("${SHA_SHORT}")

          # Append matching timestamp tags to keep a version history
          for TAG in "${BUILD_TAGS[@]}"; do
              BUILD_TAGS+=("${TAG}-${TIMESTAMP}")
          done

          BUILD_TAGS+=("${TIMESTAMP}")
          BUILD_TAGS+=("latest")

          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
              echo "Generated the following commit tags: "
              for TAG in "${COMMIT_TAGS[@]}"; do
                  echo "${TAG}"
              done

              alias_tags=("${COMMIT_TAGS[@]}")
          else
              alias_tags=("${BUILD_TAGS[@]}")
          fi

          echo "Generated the following build tags: "
          for TAG in "${BUILD_TAGS[@]}"; do
              echo "${TAG}"
          done

          echo "alias_tags=${alias_tags[*]}" >> $GITHUB_OUTPUT

      # loosely based on https://github.com/bsherman/ublue-custom/blob/a52f917fdf54f24a92f03cdd44d727ae0e15eff4/.github/workflows/reusable-build.yml#L87
      - name: Get Upstream Version
        id: version
        shell: bash
        run: |
          set -euxo pipefail
          IMAGE=$(cat ./containerfiles/*-${{ inputs.image_name }}.Containerfile | grep '^FROM ' | tail -n1 | sed -E 's/FROM (.*)( .*)?/\1/')
          KERNEL_RELEASE=$(skopeo inspect docker://${IMAGE} | jq -r '.Labels["ostree.linux"]')
          fedora_version=$(echo $KERNEL_RELEASE | grep -oP 'fc\K[0-9]+')
          echo "kernel_release=$KERNEL_RELEASE" >> $GITHUB_OUTPUT
          echo "fedora_version=$fedora_version" >> $GITHUB_OUTPUT
          ver=$(skopeo inspect docker://$IMAGE | jq -r '.Labels["org.opencontainers.image.version"]')
          if [ -z "$ver" ] || [ "null" = "$ver" ]; then
          echo "inspected image version must not be empty or null"
          exit 1
          fi
          echo "VERSION=$ver" >> $GITHUB_OUTPUT

      # Get timestamp for image creation
      - name: Get timestamp
        id: timestamp
        run: |
          echo "created=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_OUTPUT

      # Build metadata
      - name: Image Metadata
        uses: docker/metadata-action@v5
        id: meta
        with:
          images: ${{ env.IMAGE_NAME }}
          labels: |
            org.opencontainers.image.title=${{ env.IMAGE_NAME }}
            org.opencontainers.image.description=Custom image based on universal-blue
            org.opencontainers.image.created=${{ steps.timestamp.outputs.created }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.source=https://github.com/nzbr/ublue/blob/main/images/${{ inputs.image_name }}.nix
            org.opencontainers.image.vendor=nzbr
            org.opencontainers.image.version=${{ steps.version.outputs.VERSION }}
            org.universal-blue.pkg.kernel=${{ steps.version.outputs.kernel_release }}

      - name: Get image file name
        id: containerfile
        run: |
          echo "containerfile=$(echo ./containerfiles/*-${{ inputs.image_name }}.Containerfile)" >> $GITHUB_OUTPUT

      # Build image using Buildah action
      - name: Build Image
        id: build_image
        uses: redhat-actions/buildah-build@v2
        with:
          containerfiles: |
            ${{ steps.containerfile.outputs.containerfile }}
          # Postfix image name with -custom to make it a little more descriptive
          # Syntax: https://docs.github.com/en/actions/learn-github-actions/expressions#format
          image: ${{ env.IMAGE_NAME }}
          tags: |
            ${{ steps.generate-tags.outputs.alias_tags }}
          labels: ${{ steps.meta.outputs.labels }}
          oci: false

      # Workaround bug where capital letters in your GitHub username make it impossible to push to GHCR.
      # https://github.com/macbre/push-to-ghcr/issues/12
      - name: Lowercase Registry
        id: registry_case
        uses: ASzc/change-string-case-action@v6
        with:
          string: ${{ env.IMAGE_REGISTRY }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Push Image to GHCR
        uses: redhat-actions/push-to-registry@v2
        id: push
        env:
          REGISTRY_USER: ${{ github.actor }}
          REGISTRY_PASSWORD: ${{ github.token }}
        with:
          image: ${{ steps.build_image.outputs.image }}
          tags: ${{ steps.build_image.outputs.tags }}
          registry: ${{ steps.registry_case.outputs.lowercase }}
          username: ${{ env.REGISTRY_USER }}
          password: ${{ env.REGISTRY_PASSWORD }}
          extra-args: |
            --compression-format=zstd

      # This section is optional and only needs to be enabled if you plan on distributing
      # your project for others to consume. You will need to create a public and private key
      # using Cosign and save the private key as a repository secret in Github for this workflow
      # to consume. For more details, review the image signing section of the README.

      # Sign container
      - uses: sigstore/cosign-installer@v3.7.0
        if: github.event_name != 'pull_request'

      - name: Sign container image
        if: github.event_name != 'pull_request'
        run: |
          cosign sign -y --key env://COSIGN_PRIVATE_KEY ${{ steps.registry_case.outputs.lowercase }}/${{ steps.build_image.outputs.image }}@${TAGS}
        env:
          TAGS: ${{ steps.push.outputs.digest }}
          COSIGN_EXPERIMENTAL: false
          COSIGN_PRIVATE_KEY: ${{ secrets.SIGNING_SECRET }}
